for( i in seq_along(res1) )
sum1 = sum1 + (res1[i]*res1[i])
model3 = lm( y ~ poly(x,3))
res3 = resid(model3)
sum3 = 0
for( i in seq_along(res3) )
sum3 = sum3 + (res3[i]*res3[i])
model6 = lm( y ~ poly(x,6))
res6 = resid(model6)
sum6 = 0
for( i in seq_along(res6) )
sum6 = sum6 + (res6[i]*res6[i])
model2 = lm( y ~ poly(x,2))
res2 = resid(model2)
sum2 = 0
for( i in seq_along(res2) )
sum2 = sum2 + (res2[i]*res2[i])
print(sum1)
print(sum3)
print(sum6)
print(sum2)
summary(model1)
summary(model3)
summary(model6)
summary(model2)
}
source("~/CloudStation/Systems Engineering PhD/SYSE 571 - Analytics in Systems Engineering/Homework/HW10/hw10p05.R")
source("~/CloudStation/Systems Engineering PhD/SYSE 571 - Analytics in Systems Engineering/Homework/HW10/hw10p05.R")
source("~/CloudStation/Systems Engineering PhD/SYSE 571 - Analytics in Systems Engineering/Homework/HW10/hw10p05.R")
source("~/CloudStation/Systems Engineering PhD/SYSE 571 - Analytics in Systems Engineering/Homework/HW10/hw10p05.R")
source("~/CloudStation/Systems Engineering PhD/SYSE 571 - Analytics in Systems Engineering/Homework/HW10/hw10p05.R")
shiny::runApp('CloudStation/GitHub/Grid-Modeling/App-R-Shiney')
runApp('CloudStation/GitHub/Grid-Modeling/App-R-Shiney')
runApp('CloudStation/GitHub/Grid-Modeling/App-R-Shiney')
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
library(ggplot2)
library(sf)
library(dplyr)
# Example using a built-in dataset
world <- st_read(system.file("shape/nc.shp", package="sf"), quiet=TRUE)
bar_data <- data.frame(
long = c(-80, -78, -76),
lat = c(35, 35.5, 36),
values = c(10, 15, 20)
)
ggplot() +
geom_sf(data = world) +
geom_bar(data = bar_data, aes(x = factor(long), y = values), stat = "identity", width = 0.1, position = position_dodge(width = 0.2)) +
coord_sf()
library(ggplot2)
library(sf)
library(dplyr)
# Example using a built-in dataset
world <- st_read(system.file("shape/nc.shp", package="sf"), quiet=TRUE)
world <- st_transform(world, crs = 4326)
bar_data <- data.frame(
long = c(-80, -78, -76),
lat = c(35, 35.5, 36),
values = c(10, 15, 20)
)
ggplot() +
geom_sf(data = world) +
geom_bar(data = bar_data, aes(x = factor(long), y = values), stat = "identity", width = 0.1, position = position_dodge(width = 0.2)) +
coord_sf()
ggplot() +
geom_sf(data = world) +
geom_col(data = bar_data, aes(x = long, y = values), position = "dodge", width = 0.1) +
coord_sf(default_crs = NULL, lims_method = "geometry_bbox") +
theme_minimal()
library(ggplot2)
library(sf)
library(dplyr)
# Example using a built-in dataset
world <- st_read(system.file("shape/nc.shp", package="sf"), quiet=TRUE)
world <- st_transform(world, crs = 4326)
bar_data <- data.frame(
long = c(-80, -78, -76),
lat = c(35, 35.5, 36),
values = c(10, 15, 20)
)
# ggplot() +
#   geom_sf(data = world) +
#   geom_col(data = bar_data, aes(x = long, y = values), position = "dodge", width = 0.1) +
#   coord_sf(default_crs = NULL, lims_method = "geometry_bbox") +
#   theme_minimal()
# Function to create a bar chart as a grob
create_bar_grob <- function(data) {
ggplotGrob(
ggplot(data, aes(x = factor(long), y = values)) +
geom_col(position = "dodge", width = 0.5) +
theme_void() +
theme(
plot.background = element_blank(),
panel.background = element_blank()
)
)
}
# List of grobs for each bar chart
bar_grobs <- lapply(split(bar_data, seq(nrow(bar_data))), create_bar_grob)
base_plot <- ggplot() +
geom_sf(data = world) +
coord_sf(default_crs = NULL, lims_method = "geometry_bbox") +
theme_minimal()
# Add each bar chart to the plot
for (i in seq_along(bar_grobs)) {
base_plot <- base_plot +
annotation_custom(
bar_grobs[[i]],
xmin = bar_data$long[i] - 0.5, xmax = bar_data$long[i] + 0.5,
ymin = bar_data$lat[i] - 0.5, ymax = bar_data$lat[i] + 0.5
)
}
base_plot
install.packages("ggplot2")
install.packages("ggplotify")
install.packages("ggplot2.diagrammer")
# Load necessary libraries
library(ggplot2)
library(ggplotify)
library(ggplot2.diagrammer)
# Install the networkD3 package if you haven't already
install.packages("networkD3")
# Load the networkD3 package
library(networkD3)
# Define nodes (financial entities)
nodes <- data.frame(name = c("Revenue", "Investment", "Salaries", "R&D", "Marketing", "Profit"))
# Define links (financial flows)
links <- data.frame(
source = c(0, 0, 0, 1, 1, 2, 3, 4),  # Index of source node
target = c(1, 2, 3, 4, 5, 5, 5, 5),  # Index of target node
value = c(100000, 50000, 30000, 20000, 30000, 15000, 10000, 25000)  # Flow value
)
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links, Nodes = nodes, Source = "source", Target = "target", Value = "value", NodeID = "name", units = "USD", fontSize = 12, nodeWidth = 30)
# Print the Sankey diagram
sankey
# Add color to links based on the target node
links$color <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#9467bd", "#9467bd", "#9467bd")
# Create the Sankey diagram
sankey <- sankeyNetwork(
Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
units = "USD",
fontSize = 12,
nodeWidth = 30,
colourScale = JS("d3.scaleOrdinal().range(['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd'])")
)
# Add link color
sankey$x$links$colour <- links$color
# Print the Sankey diagram
sankey
# Install necessary packages if you haven't already
install.packages("ggplot2")
install.packages("ggsankey")
# Load the required packages
library(ggplot2)
library(ggsankey)
install.packages("ggplot2")
install.packages("ggsankey")
# Load the required packages
library(ggplot2)
library(ggsankey)
install.packages("ggsankey")
# install.packages("devtools")
devtools::install_github("davidsjoberg/ggsankey")
install.packages("devtools")
devtools::install_github("davidsjoberg/ggsankey")
# Load the required packages
library(ggplot2)
library(ggsankey)
# Define nodes (financial entities) and links (flows between these entities)
nodes <- data.frame(name = c("Revenue", "Investment", "Salaries", "R&D", "Marketing", "Profit"))
links <- data.frame(
source = c("Revenue", "Revenue", "Revenue", "Investment", "Investment", "Salaries", "R&D", "Marketing"),
target = c("Investment", "Salaries", "R&D", "Marketing", "Profit", "Profit", "Profit", "Profit"),
value = c(100000, 50000, 30000, 20000, 30000, 15000, 10000, 25000)
)
# Create the data frame in long format
long_data <- links %>%
make_long(source, target, value)
# Define the color palette for target nodes
target_colors <- c("Investment" = "#1f77b4", "Salaries" = "#ff7f0e", "R&D" = "#2ca02c", "Marketing" = "#d62728", "Profit" = "#9467bd")
# Create the Sankey diagram using ggsankey
p <- ggplot(long_data, aes(x = x, next_x = next_x, node = node, next_node = next_node, value = value, fill = node)) +
geom_sankey(flow.alpha = 0.7, node.color = "black") +
geom_sankey_label(aes(label = node), size = 3) +
scale_fill_manual(values = target_colors) +
theme_sankey(base_size = 16) +
labs(title = "Financial Flows Sankey Diagram", fill = "Nodes")
# Print the Sankey diagram
print(p)
# Load the required packages
library(ggplot2)
library(ggsankey)
library(dplyr)
# Define nodes (financial entities) and links (flows between these entities)
nodes <- data.frame(name = c("Revenue", "Investment", "Salaries", "R&D", "Marketing", "Profit"))
links <- data.frame(
source = c("Revenue", "Revenue", "Revenue", "Investment", "Investment", "Salaries", "R&D", "Marketing"),
target = c("Investment", "Salaries", "R&D", "Marketing", "Profit", "Profit", "Profit", "Profit"),
value = c(100000, 50000, 30000, 20000, 30000, 15000, 10000, 25000)
)
# Create the data frame in long format
long_data <- links %>%
make_long(source, target, value)
# Define the color palette for target nodes
target_colors <- c("Investment" = "#1f77b4", "Salaries" = "#ff7f0e", "R&D" = "#2ca02c", "Marketing" = "#d62728", "Profit" = "#9467bd")
# Create the Sankey diagram using ggsankey
p <- ggplot(long_data, aes(x = x, next_x = next_x, node = node, next_node = next_node, value = value, fill = next_node)) +
geom_sankey(flow.alpha = 0.7, node.color = "black") +
geom_sankey_label(aes(label = node), size = 3) +
scale_fill_manual(values = target_colors) +
theme_sankey(base_size = 16) +
labs(title = "Financial Flows Sankey Diagram", fill = "Nodes")
# Print the Sankey diagram
print(p)
# Load the required packages
library(ggplot2)
library(ggsankey)
library(dplyr)
# Define nodes (financial entities) and links (flows between these entities)
nodes <- data.frame(name = c("Revenue", "Investment", "Salaries", "R&D", "Marketing", "Profit"))
links <- data.frame(
source = c("Revenue", "Revenue", "Revenue", "Investment", "Investment", "Salaries", "R&D", "Marketing"),
target = c("Investment", "Salaries", "R&D", "Marketing", "Profit", "Profit", "Profit", "Profit"),
value = c(100000, 50000, 30000, 20000, 30000, 15000, 10000, 25000)
)
# Create the data frame in long format
long_data <- links %>%
make_long(source, target, value)
# Define the color palette for target nodes
target_colors <- c("Investment" = "#1f77b4", "Salaries" = "#ff7f0e", "R&D" = "#2ca02c", "Marketing" = "#d62728", "Profit" = "#9467bd")
# Create the Sankey diagram using ggsankey
p <- ggplot(long_data, aes(x = x, next_x = next_x, node = node, next_node = next_node, value = value, fill = next_node)) +
geom_sankey(flow.alpha = 0.7, node.color = "black") +
geom_sankey_label(aes(label = node), size = 3) +
scale_fill_manual(values = target_colors) +
theme_sankey(base_size = 16) +
labs(title = "Financial Flows Sankey Diagram", fill = "Nodes")
# Print the Sankey diagram
print(p)
# Load the required packages
library(ggplot2)
library(ggsankey)
library(dplyr)
# Define nodes (financial entities) and links (flows between these entities)
nodes <- data.frame(name = c("Revenue", "Investment", "Salaries", "R&D", "Marketing", "Profit"))
links <- data.frame(
source = c("Revenue", "Revenue", "Revenue", "Investment", "Investment", "Salaries", "R&D", "Marketing"),
target = c("Investment", "Salaries", "R&D", "Marketing", "Profit", "Profit", "Profit", "Profit"),
value = c(100000, 50000, 30000, 20000, 30000, 15000, 10000, 25000)
)
# Create the data frame in long format suitable for ggsankey
long_data <- links %>%
mutate(source = factor(source, levels = unique(c(source, target))),
target = factor(target, levels = unique(c(source, target)))) %>%
make_long(source, target, value)
# Define the color palette for target nodes
target_colors <- c("Investment" = "#1f77b4", "Salaries" = "#ff7f0e", "R&D" = "#2ca02c", "Marketing" = "#d62728", "Profit" = "#9467bd")
# Create the Sankey diagram using ggsankey
p <- ggplot(long_data, aes(x = x, next_x = next_x, node = node, next_node = next_node, value = value, fill = next_node)) +
geom_sankey(flow.alpha = 0.7, node.color = "black") +
geom_sankey_label(aes(label = node), size = 3) +
scale_fill_manual(values = target_colors) +
theme_sankey(base_size = 16) +
labs(title = "Financial Flows Sankey Diagram", fill = "Nodes")
# Print the Sankey diagram
print(p)
# Load the required packages
library(ggplot2)
library(ggsankey)
library(dplyr)
# Define nodes (financial entities) and links (flows between these entities)
links <- data.frame(
source = c("Revenue", "Revenue", "Revenue", "Investment", "Investment", "Salaries", "R&D", "Marketing"),
target = c("Investment", "Salaries", "R&D", "Marketing", "Profit", "Profit", "Profit", "Profit"),
value = c(100000, 50000, 30000, 20000, 30000, 15000, 10000, 25000)
)
# Create the data frame in long format suitable for ggsankey
long_data <- links %>%
make_long(source, target, value)
# Define the color palette for target nodes
target_colors <- c("Investment" = "#1f77b4", "Salaries" = "#ff7f0e", "R&D" = "#2ca02c", "Marketing" = "#d62728", "Profit" = "#9467bd")
# Create the Sankey diagram using ggsankey
p <- ggplot(long_data, aes(x = x, next_x = next_x, node = node, next_node = next_node, value = value, fill = factor(next_node))) +
geom_sankey(flow.alpha = 0.7, node.color = "black") +
geom_sankey_label(aes(label = node), size = 3) +
scale_fill_manual(values = target_colors) +
theme_sankey(base_size = 16) +
labs(title = "Financial Flows Sankey Diagram", fill = "Nodes")
# Print the Sankey diagram
print(p)
# Load the required packages
library(ggplot2)
library(ggsankey)
library(dplyr)
# Define nodes (financial entities) and links (flows between these entities)
links <- data.frame(
source = c("Revenue", "Revenue", "Revenue", "Investment", "Investment", "Salaries", "R&D", "Marketing"),
target = c("Investment", "Salaries", "R&D", "Marketing", "Profit", "Profit", "Profit", "Profit"),
value = c(100000, 50000, 30000, 20000, 30000, 15000, 10000, 25000)
)
# Create the data frame in long format suitable for ggsankey
long_data <- links %>%
make_long(source, target, value)
# Define the color palette for target nodes
target_colors <- c("Investment" = "#1f77b4", "Salaries" = "#ff7f0e", "R&D" = "#2ca02c", "Marketing" = "#d62728", "Profit" = "#9467bd")
# Create the Sankey diagram using ggsankey
p <- ggplot(long_data, aes(x = x, next_x = next_x, node = node, next_node = next_node, value = value, fill = factor(next_node))) +
geom_sankey(value=value, flow.alpha = 0.7, node.color = "black") +
geom_sankey_label(aes(label = node), size = 3) +
scale_fill_manual(values = target_colors) +
theme_sankey(base_size = 16) +
labs(title = "Financial Flows Sankey Diagram", fill = "Nodes")
View(long_data)
shiny::runApp('CloudStation/Wastewater Treatment/Green Wastewater Treatment Analysis - Colorado/R-Shiney App/map-beta_CO-WY_hard_code_morrision_creek')
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures.R")
scale_val = ceiling(max_val_use/7)
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures.R")
# Check if the directory exists
directory = paste0("/",datatype,"/",subtype)
directory = paste0("/",datatype,"/",subtype)
if (!file.exists(directory)) {
dir.create(directory, recursive = TRUE)
}
# Check if the directory exists
directory <- file.path(datatype, subtype)
if (!file.exists(directory)) {
dir.create(directory, recursive = TRUE)
}
# Check if the directory exists
directory <- file.path("RuFaS Input Maps",datatype, subtype)
if (!file.exists(directory)) {
dir.create(directory, recursive = TRUE)
}
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures.R")
print(directory)
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
View(data)
ggplot() +
geom_sf(data = states_sf, fill = "gray98", color = "black") +
geom_sf(data = counties_sf, aes(fill = !!sym(year)), color = NA)
View(data)
View(counties_sf)
View(counties_sf)
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
scale_val <- ceiling(max_val_use / 7)
# Calculate the maximum value and scaling
max_val_use <- ceiling(max(data[sapply(data, is.numeric)], na.rm = TRUE))
scale_val <- ceiling(max_val_use / 7)
scale_val <- ceiling(max_val_use / 7, 2)
scale_val <- round(max_val_use / 7, 2)
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
View(data)
# Perform the join
counties_sf <- counties_sf %>%
left_join(data %>% select(fips, year), by = c("FIPS" = "fips")) %>%
mutate(year = ifelse(year == 0, NA, year))  # Set zero values to NA
# Generate dynamic color bar breaks
color_bar_breaks <- c(0, seq(scale_val, floor(max_val_use / scale_val) * scale_val + scale_val, scale_val))
color_bar_labels <- as.character(c(0, color_bar_breaks[-1]))
# Create the plot
p <- ggplot() +
geom_sf(data = states_sf, fill = "gray98", color = "black") +
geom_sf(data = counties_sf, aes(fill = !!sym(year)), color = NA) +
scale_fill_gradientn(
colors = rev(brewer.pal(11, "RdYlGn")),
na.value = "gray",
limits = c(0.001, max_val_use),
breaks = color_bar_breaks,
labels = color_bar_labels
) +
geom_sf(data = states_sf, fill = "NA", color = "black") +
coord_sf(xlim = c(-125.3, -66.4), ylim = c(24, 49.9)) +
labs(
x = 'Longitude',
y = 'Latitude',
fill = paste0(year, " ", datatype, " Costs - ", subtype, " (", units, ")")
) +
guides(fill = guide_colourbar(barwidth = 30, barheight = 1.5, direction = "horizontal", title.position = "top")) +
theme_minimal() +
theme(
legend.position = "bottom",
text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
plot.title = element_text(size = 12)
)
# Save the plot
ggsave(filename = paste0(directory, "/", year, ".jpg"), plot = p, width = 12, height = 8)
View(data)
View(data)
p <- ggplot() +
geom_sf(data = states_sf, fill = "gray98", color = "black") +
geom_sf(data = counties_sf, aes(fill = !!sym(year)), color = NA) +
scale_fill_gradientn(
colors = rev(brewer.pal(11, "RdYlGn")),
na.value = "gray",
limits = c(0, max_val_use),
breaks = color_bar_breaks,
labels = color_bar_labels
) +
geom_sf(data = states_sf, fill = "NA", color = "black") +
coord_sf(xlim = c(-125.3, -66.4), ylim = c(24, 49.9)) +
labs(
x = 'Longitude',
y = 'Latitude',
fill = paste0(year, " ", datatype, " Costs - ", subtype, " (", units, ")")
) +
guides(fill = guide_colourbar(barwidth = 30, barheight = 1.5, direction = "horizontal", title.position = "top")) +
theme_minimal() +
theme(
legend.position = "bottom",
text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
plot.title = element_text(size = 12)
)
# Save the plot
ggsave(filename = paste0(directory, "/", year, ".jpg"), plot = p, width = 12, height = 8)
View(data)
# Read the counties file to reset it
counties_sf <- read_sf("us_counties_shapefile/USA_Counties.shp")
# Perform the join
counties_sf <- counties_sf %>%
left_join(data %>% select(fips, year), by = c("FIPS" = "fips")) %>%
mutate(year = ifelse(year == 0, NA, year))  # Set zero values to NA
# Generate dynamic color bar breaks
color_bar_breaks <- c(0.001, seq(scale_val, floor(max_val_use / scale_val) * scale_val + scale_val, scale_val))
color_bar_labels <- as.character(c(0, color_bar_breaks[-1]))
# Create the plot
p <- ggplot() +
geom_sf(data = states_sf, fill = "gray98", color = "black") +
geom_sf(data = counties_sf, aes(fill = !!sym(year)), color = NA) +
scale_fill_gradientn(
colors = rev(brewer.pal(11, "RdYlGn")),
na.value = "gray",
limits = c(0.001, max_val_use),
breaks = color_bar_breaks,
labels = color_bar_labels
) +
geom_sf(data = states_sf, fill = "NA", color = "black") +
coord_sf(xlim = c(-125.3, -66.4), ylim = c(24, 49.9)) +
labs(
x = 'Longitude',
y = 'Latitude',
fill = paste0(year, " ", datatype, " Costs - ", subtype, " (", units, ")")
) +
guides(fill = guide_colourbar(barwidth = 30, barheight = 1.5, direction = "horizontal", title.position = "top")) +
theme_minimal() +
theme(
legend.position = "bottom",
text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),
plot.title = element_text(size = 12)
)
# Save the plot
ggsave(filename = paste0(directory, "/", year, ".jpg"), plot = p, width = 12, height = 8)
counties_sf["1960"]
counties_sf <- counties_sf %>%
left_join(data %>% select(fips, year), by = c("FIPS" = "fips")) %>%
mutate(!!sym(year) = ifelse(!!sym(year) == 0, NA, !!sym(year)))  # Set zero values to NA
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
rlang::last_trace()
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
View(counties_sf)
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
scale_val
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
source("~/CloudStation/Sustainability Science:Consulting/2024-10 RuFaS/SS-RuFaS Github/Figures/county_figures_loop.R")
